sequenceDiagram
  title Get Accounts
    participant ui as SalesSparrow Client
    participant api as SalesSparrow API
    participant exceptionHandler as Global Exception Handler
    participant validator as Param Validator(Interceptor)
    participant controller as Account Controller
    participant service as GetAccountList Service
    participant factory as GetAccountList Factory
    participant crm as Salesforce GetAccountList Service
    participant CompositeRequestWrapper as CompositeRequest(Wrapper)
    participant salesforce as Salesforce

    ui->>api:  Send request 
    note right of ui: Request: POST {api_base_url}/v1/accounts<br><br>Body params: <br>q (Search account string) [optional] <br>

    note over api: Validate and fetch current user data from cookie<br>set current_user attribute in request.<br><br>Refer this document for interceptor sequence diagram <br> './docs/sequenceDiagrams/Common/UserAuthIntercepter.mermaid'
    break If current_user not found
        api-->>ui: Return 401 Error Response<br>current_user Not Found
    end

    api->>validator: Validate query params

    break If mandatory params not present in the body
        validator->>exceptionHandler: Throws exeption
        exceptionHandler-->>ui:Return 400 error response 
    end

    validator->>controller: Send validated params<br>params: q
    
    controller->>service: Call getAccountList method of GetAccountListService<br> params: request, GetAccountsDto: {q:String}
    note over service: GetAttribute of current_user from request<br>Which was set by interceptor

    service->>factory: Call getAccountList method of GetAccountListFactory<br>params: current_user, GetAccountsDto, viewKind: BASIC, offset: 0
    note over factory: Based on currentUser identify CRM

    factory->>crm: Call getAccountList method of particular CRM service<br>params: currentUser, q, viewKind: BASIC, offset: 0

    note over crm: Fetch salesforceUserId from request currentUser
    note over crm: Prepare url for composite API based on BASIC view kind
    break If salesforceUserId is not present in currentUser.
        crm->>exceptionHandler: Throws exeption
        exceptionHandler-->>ui:Return 400 error response 
    end
    crm->>CompositeRequestWrapper: Send compositeBody to make request to salesforce<br>params: <br> List<requestType, url, referenceId>, salesforceUserId <br>

    CompositeRequestWrapper->>salesforce: Make salesforce composite api call with commmon helper function<br><br>Refer this document for commmon helper function sequence diagram <br> './docs/sequenceDiagrams/Common/OAuthRequestHelper.mermaid'
    note right of CompositeRequestWrapper: Request: POST {instance_url}/services/data/v58.0/composite <br><br>Params: <br> requestType: GET<br> url: "/services/data/v58.0/query/?q=QUERY_STRING"<br>referenceId: "getAccounts"<br>
    
    break If any error from salesforce
        salesforce-->>CompositeRequestWrapper: Error
        CompositeRequestWrapper->>exceptionHandler: Throws exeption
        exceptionHandler-->>ui: Return 400 error response
    end

    salesforce-->>CompositeRequestWrapper: Response
    CompositeRequestWrapper-->>crm: Response
    note over crm:  Format Salesforce Response into GetAccountsFormatterDto

    crm-->>factory: Response:<br>GetAccountsFormatterDto
    factory-->>service: Response:<br>GetAccountsFormatterDto
    service-->> controller: Response:<br>GetAccountListResponseDto <br>{account_ids: []string, account_map_by_id: map[string][AccountEntity]}<br><br>AccountEntity:{id: string, name: string}
    controller-->>api: Response:<br>GetAccountListResponseDto
    note right of api: {<br>account_ids:[],<br> account_map_by_id: {}<br>}

    api-->>ui: Success:200
    note right of ui: Response body: <br> {<br>account_ids:[],<br> account_map_by_id: {}<br>}<br><br>Response headers:<br> cookie 