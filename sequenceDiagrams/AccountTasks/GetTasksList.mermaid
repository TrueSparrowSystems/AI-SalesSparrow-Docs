sequenceDiagram
  title Get Account Tasks List
    participant ui as SalesSparrow Client
    participant api as SalesSparrow API
    participant exceptionHandler as Global Exception Handler
    participant validator as Param Validator(Interceptor)
    participant controller as AccountTask Controller
    participant service as GetAccountTasksList Service
    participant factory as GetAccountTasksList Factory
    participant crm as Salesforce GetAccountTasksList Service
    participant CompositeRequestWrapper as CompositeRequest(Wrapper)
    participant salesforce as Salesforce

    ui->>api:  Send request 
    note right of ui: Request: <br>GET {api_base_url}/v1/accounts/{account_id}/tasks<br><br>path params:  <br>account_id 

    note over api: Validate and fetch current user data from cookie<br>set currentUser attribute in request.<br><br>Refer this document for interceptor sequence diagram <br> './docs/sequenceDiagrams/Common/UserAuthIntercepter.mermaid'
    break If currentUser not found
        api-->>ui: Return 401 Error Response<br>currentUser Not Found
    end

    api->>validator: Validate path params

    break If mandatory params not present in the body
        validator->>exceptionHandler: Throws exeption
        exceptionHandler-->>ui:Return 400 error response 
    end

    validator->>controller: Send validated params<br>params: accountId
    
    controller->>service: Call getTasksList method of GetAccountTasksListService<br> params: request, accountId
    note over service: GetAttribute of currentUser from request<br>Which was set by interceptor

    service->>factory: Call getTasksList method of GetAccountTasksListFactory<br>params: currentUser, accountId
    note over factory: Based on currentUser identify CRM

    factory->>crm: Call getTasksList method of particular CRM service<br>params: currentUser, accountId

    note over crm: fetch salesforceUserId from request currentUser
    break If salesforceUserId is not present in currentUser.
        crm->>exceptionHandler: Throws exeption
        exceptionHandler-->>ui:Return 400 error response 
    end
    
    note over crm: Escape special characters for accountId
    note over crm: Url Encode the salesforce query string

    crm->>CompositeRequestWrapper: Send compositeBody to make request to salesforce<br>params: <br> List<requestType, url, referenceId>, salesforceUserId <br>

    CompositeRequestWrapper->>salesforce: Make salesforce composite api call with commmon helper function<br><br>Refer this document for commmon helper function sequence diagram <br> './docs/sequenceDiagrams/Common/OAuthRequestHelper.mermaid'
    note right of CompositeRequestWrapper: Request: POST {instance_url}/services/data/v58.0/composite <br><br>Params: <br> requestType: GET<br> url: "/services/data/v58.0/query/?q=<br>SELECT Id,Subject,Description,ActivityDate,CreatedBy.Name,Owner.Name,LastModifiedDate<br>FROM Task WHERE WhatId='${accountId}'<br>ORDER By LastModifiedDate DESC LIMIT 5<br>referenceId: "GetTasks"<br>
    
    break 
        alt If 400 error from salesforce
        salesforce-->>CompositeRequestWrapper: Return 400 error response: INVALID_ACCOUNT_ID
        CompositeRequestWrapper->>exceptionHandler: Throws exeption
        exceptionHandler-->>ui: Return 400 error response
        else
        salesforce-->>CompositeRequestWrapper:  Return 500 error response
        CompositeRequestWrapper->>exceptionHandler: Throws exeption
        exceptionHandler-->>ui: Return 500 error response
        end
    end

    salesforce-->>CompositeRequestWrapper: Response
    CompositeRequestWrapper-->>crm: Response

    note over crm: Format Salesforce Response into GetTasksListFormatterDto<br>{task_ids:[],task_map_by_id:{}}<br><br>task:{<br>id: string,<br>creator_name: string,<br>description: string,<br>due_date: date,<br>crm_organization_user_name: string,<br>last_modified_time: datetime}

    crm-->>factory: Response:<br>GetTasksListFormatterDto
    factory-->>service: Response:<br>GetTasksListFormatterDto
    service-->> controller: Response:<br>GetTasksListFormatterDto
    controller-->>api: Response:<br>GetTasksListFormatterDto
    note right of api: {task_ids:[],<br>task_map_by_id:{}}

    api-->>ui: Success:200
    note right of ui: Response body: <br> {task_ids:[],<br>task_map_by_id:{}}<br><br>Response headers:<br> cookie 