sequenceDiagram
title Update Account Event API
    participant ui as SalesSparrow Client
    participant api as SalesSparrow API
    participant exceptionHandler as Global Exception Handler
    participant validator as Param Validator(Interceptor)
    participant controller as Account Event Controller
    participant service as UpdateEvent Service
    participant factory as UpdateEvent Factory
    participant crm as Salesforce UpdateEvent Service
    participant CompositeRequestWrapper as CompositeRequest(Wrapper)
    participant salesforce as Salesforce

    ui->>api:  Send request 
    note right of ui: Request: Request: <br>PUT {api_base_url}/v1/accounts/{account_id}/events/{event_id}<br><br>path params:  <br>account_id (Account Id of the event)<br>event_id (Id of the event) <br><br> request body:<br>description (Content of Event) [Mandatory]<br>start_datetime (Start of Event) [Mandatory]<br>end_datetime (End of Event) [Mandatory]

    note over api: Validate and fetch current user data from cookie<br>set currentUser attribute in request.<br><br>Refer this document for interceptor sequence diagram <br> './docs/sequenceDiagrams/Common/UserAuthIntercepter.mermaid'
    break If currentUser not found
        api-->>ui: Return 401 Error Response<br>currentUser Not Found
    end

    note over api: UpdateEventDto: <br>{<br>description,<br>startDatetime,<br>endDatetime<br>}
    api->>validator: Validate path and body params

    break 
        alt If mandatory params not present in the body    
            validator->>exceptionHandler: Throws exeption
            exceptionHandler-->>ui:Return 400 error response
        else If description character length > 32000
            validator->>exceptionHandler: Throws exeption
            exceptionHandler-->>ui:Return 400 error response
        else If start_datetime is not a valid date time format
            validator->>exceptionHandler: Throws exeption
            exceptionHandler-->>ui:Return 400 error response
        else If end_datetime is not a valid date time format
            validator->>exceptionHandler: Throws exeption
            exceptionHandler-->>ui:Return 400 error response
        end
    end

    validator->>controller: Send validated params<br>params: UpdateEventDto, accountId, eventId
    
    controller->>service: Call updateEvent method of updateEventService<br> params: request, UpdateEventDto, accountId, eventId
    note over service: Get Attribute of currentUser from request<br>Which was set by interceptor

    service->>factory: Call updateEvent method of updateEventFactory<br>params: currentUser, UpdateEventDto, accountId, eventId
    note over factory: Based on currentUser identify CRM

    factory->>crm: Call updateEvent method of particular CRM service<br>params: currentUser, UpdateEventDto, accountId, eventId

    note over crm: fetch salesforceUserId from request currentUser
    break If salesforceUserId is not present in currentUser.
        crm->>exceptionHandler: Throws exeption
        exceptionHandler-->>ui:Return 401 error response 
    end
    note over crm: get subject as first 60 characters of description
    crm->>CompositeRequestWrapper: Send compositeBody to make request to salesforce<br>params: <br> List<requestType, url, referenceId>, salesforceUserId <br>

    CompositeRequestWrapper->>salesforce: Make salesforce composite api call with commmon helper function<br><br>Refer this document for commmon helper function sequence diagram <br> './docs/sequenceDiagrams/Common/OAuthRequestHelper.mermaid'
    note right of CompositeRequestWrapper: Request: POST {instance_url}/services/data/v58.0/composite <br><br>Params: <br> requestType: PATCH<br> url: "/services/data/v58.0/sobjects/Event/{eventId}"<br>body: {<br>Description: "@{UpdateEventDto.description}",<br> Subject: "@{subject}",<br>StartDateTime: "@{UpdateEventDto.startDateTime}",<br>EndDateTime: "@{UpdateEventDto.endDateTime}"<br>} <br>referenceId: "UpdateEvent"<br>
    
    break If any error from salesforce
        salesforce-->>CompositeRequestWrapper: Error
        CompositeRequestWrapper->>exceptionHandler: Throws exeption
        exceptionHandler-->>ui: Return 500 error response
    end

    salesforce-->>CompositeRequestWrapper: Response
    CompositeRequestWrapper-->>crm: Response

    crm-->>factory: Response
    factory-->>service: Response
    service-->> controller: Response
    controller-->>api: Response

    api-->>ui: Success:202
    note right of ui: Response body: <br> {}<br><br>Response headers:<br> cookie