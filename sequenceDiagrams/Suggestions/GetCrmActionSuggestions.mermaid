sequenceDiagram
  title Get CRM Action Suggestions
    participant ui as SalesSparrow Client
    participant api as SalesSparrow API
    participant exceptionHandler as Global Exception Handler
    participant validator as Param Validator(Interceptor)
    participant controller as Suggestions Controller
    participant service as CrmActionsSuggestionsService
    participant lib as GetCrmActionSuggestions(Lib)
    participant wrapper as OpenaiRequest(Wrapper)
    participant openai as OpenAi

    ui->>api:  Send request 
    note right of ui: Request: <br>POST {api_base_url}/v1/suggestions/crm-actions<br><br>Body params: <br>text [mandatory]


    note over api: Validate and fetch current user data from cookie<br>set current_user attribute in request.<br><br>Refer this document for interceptor sequence diagram <br> './docs/sequenceDiagrams/Common/UserAuthIntercepter.mermaid'
    break If current_user not found
        api-->>ui: Error Response<br>current_user Not Found
    end

    api->>validator: Validate mandatory parameters

   break 
        alt If mandatory params not present in the body
            validator->>exceptionHandler: Throws exeption
            exceptionHandler-->>ui:Return 400 error response
        else If text character length > 12000
            validator->>exceptionHandler: Throws exeption
            exceptionHandler-->>ui:Return 400 error response
        end
    end

    validator->>controller: Send validated params<br>params: text
    
    controller->>service: Call getSuggestions method of CrmActionsSuggestionsService<br> params: text

    service->>lib: Call getTaskSuggestions method of GetCrmActionSuggestions lib<br>params: text
    note over lib: Construct payload for openai api call

    lib->>wrapper: Call makeRequest method of OpenaiRequest wrapper<br>params: payload

    wrapper->>openai: Make api call to openai chat completions endpoint
    note right of wrapper: Request: POST https://api.openai.com/v1/chat/completions <br><br>Params: <br> model: "gpt-3.5-turbo-0613" <br> messages: "" <br> functions: "" 
    
    alt If error from OpenAI
        openai-->>wrapper: Error
        alt If 400 error
            wrapper->>exceptionHandler: Throws 500 exception
            exceptionHandler-->>ui: Return 500 error response
        end

        alt If 401 error
            wrapper->>exceptionHandler: Throws 500 exception
            exceptionHandler-->>ui: Return 500 error response
        end

        alt If any other error
            wrapper->>exceptionHandler: Throws 500 exception
            exceptionHandler-->>ui: Return 500 error response
        end
    end

    openai->>wrapper: Success response
    wrapper->>lib: Response:<br>HttpResponse 

    note over lib: Format Http response into GetCrmActionsSuggestionsFormatterDto <br> Sanitize due_date into YYYY-MM-DD<br>Sanitize start_datetime, end_datetime<br> into yyyy-MM-dd'T'HH:mm:ss.SSSZ format
    lib-->>service: Response:<br>GetCrmActionsSuggestionsFormatterDto 
    note right of service: {add_task_suggestions: [{description: "", due_date: ""}],<br>add_event_suggestions: [{description: "", start_datetime: "", end_datetime: ""}]}

    service-->> controller: Response:<br>GetCrmActionsSuggestionsFormatterDto 
    controller-->>api: Response:<br>GetCrmActionsSuggestionsFormatterDto 

    api-->>ui: Success:200
    note right of ui: Response body: <br> {add_task_suggestions: [{description: "", due_date: ""}],<br>add_event_suggestions: [{description: "", start_datetime: "", end_datetime: ""}]}<br><br>Response headers:<br> cookie 