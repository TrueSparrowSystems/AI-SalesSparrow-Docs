sequenceDiagram
  title Get Notes List
    participant ui as SalesSparrow Client
    participant api as SalesSparrow API
    participant exceptionHandler as Global Exception Handler
    participant validator as Param Validator(Interceptor)
    participant controller as Account Controller
    participant service as GetNotesList Service
    participant factory as GetNotesList Factory
    participant crm as Salesforce GetNotesList Service
    participant CompositeRequestWrapper as CompositeRequest(Wrapper)
    participant salesforce as Salesforce

    ui->>api:  Send request 
    note right of ui: Request: <br>GET {api_base_url}/v1/accounts/{account_id}/notes<br><br>path params:  <br>account_id [mandatory] 

    note over api: Validate and fetch current user data from cookie<br>set current_user attribute in request.<br><br>Refer this document for interceptor sequence diagram <br> './docs/sequenceDiagrams/Common/UserAuthIntercepter.mermaid'
    break If current_user not found
        api-->>ui: Return 401 Error Response<br>current_user Not Found
    end

    api->>validator: Validate path params

    break If mandatory params not present in the body
        validator->>exceptionHandler: Throws exeption
        exceptionHandler-->>ui:Return 400 error response 
    end

    validator->>controller: Send validated params<br>params: accountId
    
    controller->>service: Call getNotesList method of GetNotesListService<br> params: request, accountId
    note over service: GetAttribute of current_user from request<br>Which was set by interceptor

    service->>factory: Call getNotesList method of GetNotesListFactory<br>params: currentUser, accountId
    note over factory: Based on currentUser identify CRM

    factory->>crm: Call getNotesList method of particular CRM service<br>params: currentUser, accountId

    note over crm: fetch salesforceUserId from request currentUser

    break If salesforceUserId is not present in currentUser.
        crm->>exceptionHandler: Throws exeption
        exceptionHandler-->>ui:Return 400 error response 
    end

    note over crm: Escape special characters for accountId
    note over crm: Url Encode the salesforce query string

    crm->>CompositeRequestWrapper: Send compositeBody to make request to salesforce<br>params: <br> List<requestType, url, referenceId>, salesforceUserId <br>

    CompositeRequestWrapper->>salesforce: Make salesforce composite api call with commmon helper function<br><br>Refer this document for commmon helper function sequence diagram <br> './docs/sequenceDiagrams/Common/OAuthRequestHelper.mermaid'
    note right of CompositeRequestWrapper: Request: POST {instance_url}/services/data/v58.0/composite <br><br>Params: <br> requestType: GET<br> url: "/services/data/v58.0/query/?q=<br>SELECT ContentDocumentId FROM ContentDocumentLink WHERE LinkedEntityId = 'accountId'<br>referenceId: "GetContentDocumentId"<br>
    
    break 
        alt If 400 or 404 error from salesforce
        salesforce-->>CompositeRequestWrapper: Return 400 error response: INVALID_ACCOUNT_ID
        CompositeRequestWrapper->>exceptionHandler: Throws exeption
        exceptionHandler-->>ui: Return 400 error response
        else
        salesforce-->>CompositeRequestWrapper:  Return 500 error response
        CompositeRequestWrapper->>exceptionHandler: Throws exeption
        exceptionHandler-->>ui: Return 500 error response
        end
    end

    salesforce-->>CompositeRequestWrapper: Response
    CompositeRequestWrapper-->>crm: Response

    note over crm: Make a List of ContentDocumentId from response
    note over crm: Escape special characters for List of ContentDocumentId
    note over crm: Url Encode the salesforce query string

    crm->>CompositeRequestWrapper: Send compositeBody to make request to salesforce<br>params: <br> List<requestType, url, referenceId>, salesforceUserId <br>

    CompositeRequestWrapper->>salesforce: Make salesforce composite api call with commmon helper function<br><br>Refer this document for commmon helper function sequence diagram <br> './docs/sequenceDiagrams/CommonRequestHelper.mermaid'
    note right of CompositeRequestWrapper: Request: POST {instance_url}/services/data/v58.0/composite <br><br>Params: <br> requestType: GET<br> url: "/services/data/v58.0/query/?q=<br>SELECT Id, Title, TextPreview, ContentModifiedDate , CreatedBy.Name FROM ContentNote <br>WHERE Id in ('GetContentDocumentId[0]', 'GetContentDocumentId[1]')<br>referenceId: "GetContentNotes"<br>    
    
    break If any error from salesforce
        salesforce-->>CompositeRequestWrapper: Return 500 error response
        CompositeRequestWrapper->>exceptionHandler: Throws exeption
        exceptionHandler-->>ui: Return 500 error response
    end

    salesforce-->>CompositeRequestWrapper: Response
    CompositeRequestWrapper-->>crm: Response

    note over crm: Format Salesforce Response into GetNotesListFormatterDto

    crm-->>factory: Response:<br>GetNotesListFormatterDto
    factory-->>service: Response:<br>GetNotesListFormatterDto
    service-->> controller: Response:<br>GetNotesListFormatterDto
    controller-->>api: Response:<br>GetNotesListFormatterDto
    note right of api: {note_details: {}}

    api-->>ui: Success:200
    note right of ui: Response body: <br> note_details<br><br>Response headers:<br> cookie 