sequenceDiagram
  title Create Event
    participant ui as SalesSparrow Client
    participant api as SalesSparrow API
    participant exceptionHandler as Global Exception Handler
    participant validator as Param Validator(Interceptor)
    participant controller as Account Event Controller
    participant service as CreateEvent Service
    participant factory as CreateEvent Factory
    participant crm as Salesforce CreateEvent Service
    participant CompositeRequestWrapper as CompositeRequest(Wrapper)
    participant salesforce as Salesforce

    ui->>api:  Send request 
    note right of ui: Request: Request: <br>POST {api_base_url}/v1/accounts/{account_id}/events<br><br>path params:  <br>account_id (Account Id for attaching event) <br><br> request body:<br>description (Content of Event)<br>start_datetime (Start of Event)<br>end_datetime (End of Event)<br>

    note over api: Validate and fetch current user data from cookie<br>set currentUser attribute in request.<br><br>Refer this document for interceptor sequence diagram <br> './docs/sequenceDiagrams/Common/UserAuthIntercepter.mermaid'
    break If currentUser not found
        api-->>ui: Error Response<br>currentUser Not Found
    end

    note over api: CreateEventDto: <br>{<br>description,<br>startDatetime,<br>endDatetime<br>}
    api->>validator: Validate path and body params

    break 
        alt If mandatory params not present in the body    
            validator->>exceptionHandler: Throws exeption
            exceptionHandler-->>ui:Return error response
        else If description character length > 32000
            validator->>exceptionHandler: Throws exeption
            exceptionHandler-->>ui:Return error response
        else If start_datetime is not a valid date time format
            validator->>exceptionHandler: Throws exeption
            exceptionHandler-->>ui:Return error response
        else If end_datetime is not a valid date time format
            validator->>exceptionHandler: Throws exeption
            exceptionHandler-->>ui:Return error response
        end
    end

    validator->>controller: Send validated params<br>params: CreateEventDto, accountId
    
    controller->>service: Call createEvent method of CreateEventService<br> params: request, CreateEventDto, accountId
    note over service: Get Attribute of currentUser from request<br>Which was set by interceptor

    service->>factory: Call createEvent method of CreateEventFactory<br>params: currentUser, CreateEventDto, accountId
    note over factory: Based on currentUser identify CRM

    factory->>crm: Call createEvent method of particular CRM service<br>params: currentUser, CreateEventDto, accountId

    note over crm: fetch salesforceUserId from request currentUser
    break If salesforceUserId is not present in currentUser.
        crm->>exceptionHandler: Throws exeption
        exceptionHandler-->>ui:Return error response 
    end
    note over crm: get subject as first 60 characters of description
    crm->>CompositeRequestWrapper: Send compositeBody to make request to salesforce<br>params: <br> List<requestType, url, referenceId>, salesforceUserId <br>

    CompositeRequestWrapper->>salesforce: Make salesforce composite api call with commmon helper function<br><br>Refer this document for commmon helper function sequence diagram <br> './docs/sequenceDiagrams/Common/OAuthRequestHelper.mermaid'
    note right of CompositeRequestWrapper: Request: POST {instance_url}/services/data/v58.0/composite <br><br>Params: <br> requestType: POST<br> url: "/services/data/v58.0/sobjects/Event"<br>body: {<br>Description: "@{CreateEventDto.description}",<br> Subject: "@{subject}",<br>WhatId: "@{accountId}",<br>StartDateTime: "@{CreateEventDto.startDateTime}",<br>EndDateTime: "@{CreateEventDto.endDateTime}"<br>} <br>referenceId: "CreateEvent"<br>
    
    break If any error from salesforce
        salesforce-->>CompositeRequestWrapper: Error
        CompositeRequestWrapper->>exceptionHandler: Throws exeption
        exceptionHandler-->>ui: Return error response
    end

    salesforce-->>CompositeRequestWrapper: Response
    CompositeRequestWrapper-->>crm: Response

    note over crm: Format Salesforce Response into <br>CreateEventFormatterDto<br>{eventId: string}

    crm-->>factory: Response: <br>CreateEventFormatterDto
    factory-->>service: Response: <br>CreateEventFormatterDto
    service-->> controller: Response: <br>CreateEventFormatterDto
    controller-->>api: Response: <br>CreateEventFormatterDto
    note right of api: CreateEventFormatterDto

    api-->>ui: Success:201
    note right of ui: Response body: <br> {event_id:""}<br><br>Response headers:<br> cookie 